# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'net/http'
fastlane_require 'uri'
fastlane_require 'json'

default_platform(:ios)

project = 'keyn.xcodeproj'
scheme = 'keyn'

def analytics(message)
    uri = URI.parse("https://api.keyn.io/logging/analytics")
    header = {'Content-Type': 'application/json; charset=utf-8'}
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Post.new(uri.request_uri, header)
    request.body = message.to_json
    response = http.request(request)
end

def invitation_sent(email_address)
    message = {
        message: 'Beta invitation for user sent.',
        device: 'APP',
        debug: false,
        code: 'INVITATION_SENT',
        email: email_address
    }
    analytics(message)
end

platform :ios do
    desc 'Run tests'
    lane :test do
        scan(
            scheme: scheme,
            destination: 'platform=iOS,id=e28971092f1bbf0708071d08ba4c5d53f0fbfaec'
        )
    end

    desc 'Build app'
    lane :build do
        test
        cert
        sigh(app_identifier: 'io.keyn.keyn.keynNotificationExtension')
        sigh(app_identifier: 'io.keyn.keyn.keynCredentialProvider')
        sigh(app_identifier: 'io.keyn.keyn')
        increment_build_number({
          build_number: latest_testflight_build_number + 1
        })
        gym(scheme: scheme)
    end

    desc 'Start minor release'
    lane :start_minor_release do
        version = increment_version_number(bump_type: 'minor')
        `git stash;git flow release start #{version};git stash pop; git add ..`
        commit_version_bump(xcodeproj: project)
    end

    desc 'Start patch version'
    lane :start_patch_release do
        version = increment_version_number(bump_type: 'patch')
        `git stash;git flow release start #{version};git stash pop;git add ..`
        commit_version_bump(xcodeproj: project)
    end

    desc 'Start major version'
    lane :start_major_release do
        version = increment_version_number(bump_type: 'major')
        `git stash;git flow release start #{version};git stash pop; git add ..`
        commit_version_bump(xcodeproj: project)
    end

    desc 'Start hotfix version'
    lane :start_hotfix do |options|
        version = increment_version_number(bump_type: 'patch')
        `git stash;git flow hotfix start #{options[:name]};git stash pop;git add ..`
        commit_version_bump(xcodeproj: project)
    end

    desc 'Beta release'
    lane :beta_release do
        version = get_version_number(target: scheme)
        build
        upload_to_testflight(
            skip_waiting_for_build_processing: true
        )
        slack(message: "New version of Keyn released! #{version}")
    end

end

error do |lane, exception|
    slack(
        # message with short human friendly message
        message: exception.to_s,
        success: false,
        # Output containing extended log output
        payload: { "Output" => exception.error_info.to_s }
    )
end
