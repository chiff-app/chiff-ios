# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

fastlane_require 'net/http'
fastlane_require 'uri'
fastlane_require 'json'

default_platform(:ios)

project = 'chiff.xcodeproj'
scheme = 'chiff'

platform :ios do

    desc 'Run tests'
    lane :test do
        scan(
            scheme: scheme,
            device: 'iPhone 8'
        )
    end

    desc 'Upload dSYMs to Crashlytics'
    lane :upload_symbols do |options|
        download_dsyms(
          version: 'latest'
        )
    
        upload_symbols_to_crashlytics(
          gsp_path: "./chiff/SupportFiles/GoogleService-Info.plist",
          binary_path: "./fastlane/upload_firebase_symbols"
        )
    
        clean_build_artifacts()
      end

    desc 'Build app'
    lane :build do
	    xcode_select("/Users/bas/Downloads/Xcode-beta.app")
        test
        cert
        sigh(app_identifier: 'io.keyn.keyn.keynNotificationExtension')
        sigh(app_identifier: 'io.keyn.keyn.keynCredentialProvider')
        sigh(app_identifier: 'io.keyn.keyn')
        build_num = app_store_build_number(
            live: false,
        )
        increment_build_number({
          build_number: build_num + 1
        })
        gym(scheme: scheme)
    end

    desc 'Start minor release'
    lane :start_minor_release do
        version = increment_version_number(bump_type: 'minor')
        `git stash;git flow release start #{version};git stash pop; git add ..`
        commit_version_bump(xcodeproj: project)
    end

    desc 'Start patch version'
    lane :start_patch_release do
        version = increment_version_number(bump_type: 'patch')
        `git stash;git flow release start #{version};git stash pop;git add ..`
        commit_version_bump(xcodeproj: project)
    end

    desc 'Start major version'
    lane :start_major_release do
        version = increment_version_number(bump_type: 'major')
        `git stash;git flow release start #{version};git stash pop; git add ..`
        commit_version_bump(xcodeproj: project)
    end

    desc 'Start hotfix version'
    lane :start_hotfix do
        version = increment_version_number(bump_type: 'patch')
        `git stash;git flow hotfix start #{version};git stash pop;git add ..`
        commit_version_bump(xcodeproj: project)
    end

    desc 'Beta release'
    lane :beta_release do
        version = get_version_number(target: scheme)
        build
        upload_to_testflight()
        upload_symbols
        slack(message: "New Testflight version of Chiff released! #{version}")
    end

    desc "Submit Chiff to the App Store"
    lane :release do |options|
      version = get_version_number(target: scheme)
      build
      deliver(
        app_version: version,
        platform: 'ios',
        skip_screenshots: true
      )
      upload_symbols
      slack(message: "New version of Chiff released! #{version}")
    end

end

error do |lane, exception|
    slack(
        # message with short human friendly message
        message: exception.to_s,
        success: false,
        # Output containing extended log output
        payload: { "Output" => exception.error_info.to_s }
    )
end
